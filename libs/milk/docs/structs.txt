[V0] 

struct are the closest form to OOP
A struct is composed of a list of fields.
A list must have at least one non-static attribute
(for V0, might change in future versions)

Attributes:
struct can contain attributes of any type 
(except refs (& / &[]), compiler cannot safely assume it will always be valid)
attributes can be const (their value cannot be changed)

[V0-HACK]
Struct can contain reference members.
Incentive: can cause memory corruption, but only way to use heap allocated mem in V0

Methods:
Methods are defined like any other functions.
Except they can have a const property to say the object isn't modified
Inside the method, there is an automatically defined argument self.
It is of type & Self or &const Self.
Actually, a method is just a function with an extra first parameter for self.


Static fields:

Static methods:
We can define a static method (does not need a class instance).
We use 'fn static'

Static attributes:
Global variables.
Not in V0, more infos below


Object construction:
There is no constructor method. 
To construct an object we use the constructor syntax:
StructName (.field1: val1, .field2: val2, ... )
All fields must be initialized.

Object destruction:
Like any other variable, the object is destructed when it goes out of scope.
The destruction order is undefined.
The destructors of all attributes are also called.
By default, the destructor does nothing else, can be changed. (see special methods)


Important methods:

Importants methods are either:
- common methods, but that are often used as a paradigm
- Special methods, they start with '__', 
and have a special signification for the compiler.
some methods may have a default implementation, for some requirements.
You can replace body method with '= default;' to use it.

[SPECIAL][DEFAULT] __copy(): Self (Copy concept)
Copy constructor for an object.
This is only implemented for which the copy would be really fast
Default implem simply copies all the bytes. 
Most of the time that's what you want to do.
Not defined by default.
The default copy all fields. Can only be used if every fields have the Copy concept


[SPECIAL][DEFAULT] __drop(): void
Called before object destruction. Does nothing by default.
The default does nothing

[DEFAULT] clone() const: Self (Clone concept)
Create a deep full, long copy of the object.
The default clone all fields. Can only be used if every fields have the Clone concept


[DEFAULT] static new() : Self (Default concept)
Create an object with the default initialization
Default implem simply call the default implem on all child classes
The default use default init on all fields. Can only be used if every fields have the Default Concept



Struct and constantness:
When we manipulate a constant struct, we can only call const methods.
What's more, every accessed field is a const-reference.

For const field, when we try to access it, we get a const-reference.




Example:

struct Vec2f
{

    fn __copy() const : Vec2f = default;

    fn static new(x: f32, y: f32) : Vec2f {
        return Vec2f (
            ._x: x,
            ._y: y
        )
    }

    fn static zero(): Vec2f
    {
        return Vec2::new(0, 0);
    }

    fn get_x() const : f32 { return self._x; }
    fn get_y() const : f32 { return self._y; }

    

    let _x: f32;
    let _y: f32;
}









[V-MOD]
Every field / method can have a visibility specifier: public / private
Private members are only accessible from within the struct.

[V-GLOBAL]
We can define a static attribute.
This is exaclty like a global variable,
except it's scoped to the class