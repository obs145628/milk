@TODO

[V-UNION]

Union are used to store different variables types in one object.
Only one active at the same time.
The size is the size of the biggest object, + an i32 for the type.

union <name>
{
	name1: type1,
	name2: type2,
	...
}

eg:
union MyMess
{
	X: i32,
	Vec: Vector2f,
	Err: String
}


The union is implemented like a struct, with a buffer that can contain any possible object, and an i32 for the type.


defined methods:

static def new_XXX(T obj): <struct-type>
Create a new union object with the right underlying type

const type(): ???
returns a type object, of undefined type.
Can be compared with other type objects of the same union.

We define static constants Type_XXX to use for compareason.

const isXXX: bool()
return true if it's of the right type.

const toXXX(): &const T
toXXX(): &T
Get a ref to the underlying true object.

struct MyMessImpl
{
	static let Type_X: ???;
	static let Type_Vec: ???;
	static let Type_Err: ???

	static def new_X(x: i32): MyMessageImpl;
	static def new_Vec(x: Vector2f): MyMessageImpl;
	static def new_Err(x: String): MyMessageImpl;

	def const type(): ???;

	def const isX(): bool;
	def isVec(): bool;
	def isErr(): bool;

	def toX(): i32&
	def toVec(): Vector2f&
	def toErr(): String&
	def const toX(): &const i32
	def const toVec(): &const Vector2f
	def const toErr(): &const String
};


