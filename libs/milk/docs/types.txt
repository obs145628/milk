[V0]

A type represent a data layout for some information. 
All types have data type known at compile time.

Types can be divided into 3 big categories: Value Types, Ref Types, and No Type


Value Types

These are actual types that represent data

NativeSacalar:
NativeInt: u8, u16, u32, u64, i8, i16, i32, i64, 
MativeFloat: f32, f64

Struct types:
C-like struct. struct {key1: type1, key2: type2, ...}
See structs for more infos

Boolean type
true / false
See boolean for more infos

Enum
<name> {val1, val2, ...}
See enums for more infos



Ref Types


Reference type:
& type or &const type
This is implemented as a pointer (fixed size addr).
The pointer must always be initialized and cannot be changed.
The language makes sure that it always points to a valid memory address.
It is used exactly at would be used the real type.
&const means the value it refers to cannot be modified.
It refers to a const storage memory.

Reference to array type:
&[] type or &[]const type.
This is implemented as a pointer + size.
Like for references, the underlying data is always initialzied, const, and valid.
&[]const means the underlying data cannot be modified

There is only two operations:

const size(): usize
Returns the size of the array

const __operator_subscript(idx: usize): &type or &const type
Returns a reference to an item. &const if the array is &[]const.
Panic if the index is invalid.

For & T and &[] T, T must be a value type: there is no reference to reference, or to void.


No Type

void type.
It signifies the absence of type, we cannot have any storage def to a void.
It can be used to say a function return a void value.




Type aliases

To simplyfy type notation, we can create aliases.
type <name> = <ValueType>;

The language also defines some native alias types, depending on the architecture:
- isize (usually i64), size of a pointer
- usize (usually u64), size of a pointer
- char (i8 or u8)



Copy vs Move


Copy operation: copy all informations from src mem to dst mem.
AT the end, both are valid.
All basic types except the struct implement the default copy (memcpy)
This is for small types, and should be really fast.
Usually, it simply copies the bytes
To copy large amounts of data, better to use a clone() method.

Move operation: Move everything from src to dst.
src won't be used after the move.
The move implementation simply copy the bytes from src to dst, for all types. It cannot be changed for any type.




Types sumarry


type:
-simpletype:
--void
--valtype:
---native: u8, u16, u32, u64, i8, i16, i32, i64
---struct type: identified by its name
---enum type: identified by its name, struct-lik
--reftype:
---& T: mref of valtype
---&const T: cref of valtype 
---&[] T: amref of valtype
---&[]const T: acref of valtype
-compositetype:
--funtype: simpletype[]: return + argument types