
[V0]

A function is defined like this:

'fn' <name> '(' <argname1> : <argtype1>, <argname2> : <argtype2>, ... ')' ':' <rettype> <body>

On the arguments definitions, we can have const arguments.
The definition is considered as without const.
It only means that on the function body, we won't be able to change this argument value.

It's not possible to define a function with a ref return type.
But functions from the standard lib can return a ref.

All functions, and all methods within the same class must have different names

A method is simply a function with an extra first parameter for self.
It means exactly the same strategy for function resolution is used for methods.


Examples:


fn fact(x: u64) : u64 {
    return x <= 1 ? 1 : x * fact(x - 1);
}








[V0-HACK]
Functions can return ref types
Incentive: can cause memory corruption, but only way to use heap allocated mem in V0



[V-FN-OVERLOAD]
Function overloading.

Allows to define several functions with the same name and different signature.
It means the number and types of arguments can change 
(ret type is not part of the signature)

Resolving:
For a function call, the compiler list all the functions with a valid call.
When there is more than one, the compiler give a match score to every.
When all parameters match using semantic casting (remove &, add const, ...),
the match score is 0.
Then we need to do one or several implicit cast, the match score is 1.
If there is only one function with the lowest score, it is selected.
Otherwhise, this is an amibiguous call.

Ambiguous resolving:

Scalar promoting:
Can be applied when:
- all the possibles function differ on scalar types.
- for every signature, the differ are the same scalar type.
We select the version that have the lower argument that is same or higher than all call arguments.
If there is none, we just select the one with the higher argument.
The classement is done as:
f64
f32
i64
u64
i32
u32
i16
u16
i8
u8

It's possible to create several functions / methods with the same signature, but useless, it will always make an ambiguous call.

@TODO
Do we need resolving for const vs non const method ? 
Method transformed into function for resolution

[V-TPROG]
When calling a function with explicit template types, then we add all templates functions for which the call is valid to the list of possible functions.
Then the resolving is identical.

For implicit templates we must first do some pattern matching on the arguments in order to find all possible template types.
Then t's resolving as for explicit template calls.

@TODO
This is just an idea, it might chance.
How about the constantness ?
Especially with the templates.