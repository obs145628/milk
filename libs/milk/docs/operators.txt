[V0]

The language defines several operators.
Most operators are transformed to functions calls.
And some can be overloaded, others can't
This page describe these functions signature and their default implementation.

here are the list, by precedence order:

Assignment: =, += *=, -=, /=, %= (RTL)
transformed to:
__operator_set(dst: U&, src: U): void; 
__operator_setadd(dst: U&, src: U): void; [CAN OVERLOAD]
__operator_setsub(dst: U&, src: U): void; [CAN OVERLOAD]
__operator_setmul(dst: U&, src: U): void; [CAN OVERLOAD]
__operator_setdiv(dst: U&, src: U): void; [CAN OVERLOAD]
__operator_setmov(dst: U&, src: U): void; [CAN OVERLOAD]
U: val_type of left operand (strip all qualifiers)

operator_set: the basic implementation calls the destructor on dst
then move src into dst.
For all the .=, U must be a NativeScalar



Ternary operators (RTL)
a ? b : c.
A must be a boolean, and b and c must be of same type.

to be valid, then:
- b and c must be of the same value type
- or there is an implicit cast from b to c or c to b

For implicit cast, the result type is defined exaclty like for function overloading:
The operators trys to call __mock_ternary(b: T1, c: T2)
The definitions are:
__mock_ternary(a: u8, b: u8)
__mock_ternary(a: i8, b: i8)
... (all scalar types)

ternary operators returns a ref if: b and c are both ref, and there is no implicit cast
otherwhise it returns a value.



|| (LTR)
a (bool) || b (bool) => bool
Performs short circuiting


&& (LTR)
a (bool) && b (bool) => bool
Performs short circuiting


| (LTR)
transforms to:
U __operator_binand(x: U, y: U) with U : NativeInt [CAN OVERLOAD]


^ (LTR)
transforms to:
U __operator_xor(x: U, y: U) with U : NativeInt [CAN OVERLOAD]


& (LTR)
transforms to:
U __operator_binor(x: U, y: U) with U : NativeInt [CAN OVERLOAD]


== / != (LTR)
== transforms to:
bool __operator_equals(x: U, y: U) with U : NativeSclar or bool or Enum [CAN OVERLOAD]
a != => ! __operators_equals(a, b)


< > <= >= (LTR)
transforms to:
bool __operator_lt(x: U, y: U) with U : NativeScalar [CAN OVERLOAD]
bool __operator_gt(x: U, y: U) with U : NativeScalar [CAN OVERLOAD]
bool __operator_leq(x: U, y: U) with U : NativeScalar [CAN OVERLOAD]
bool __operator_geq(x: U, y: U) with U : NativeScalar [CAN OVERLOAD]


>> << (LTR)
transforms to:
U __operator_rshift(x: U, y: U) with U : NativeInt [CAN OVERLOAD]
U __operator_lshift(x: U, y: U) with U : NativeInt [CAN OVERLOAD]


+ - (LTR)
transforms to:
U __operator_add(x: U, y: U) with U : NativeScalar [CAN OVERLOAD]
U __operator_sub(x: U, y: U) with U : NativeScalar [CAN OVERLOAD]


* / % (LTR)
transforms to:
U __operator_mul(x: U, y: U) with U : NativeScalar [CAN OVERLOAD]
U __operator_div(x: U, y: U) with U : NativeScalar [CAN OVERLOAD]
U __operator_mod(x: U, y: U) with U : NativeInt [CAN OVERLOAD]



Unary operators:
All RTS, have the same precedence level:


+
transforms to:
U __operator_add(x: U) with U : NativeScalar [CAN OVERLOAD]


-
transforms to:
U __operator_neg(x: U) with U : NativeScalar [CAN OVERLOAD]


!
transforms to:
bool __operator_boolnot(x: bool)


~
transforms to:
U __operator_not(x: U) with U : NativeInt [CAN OVERLOAD]




Primary Expression operators
All LTR, have the same precedence level


() (Call oeprator)
It the left hand side is a ExprFunctio, simply calls this function / method.
Otherwhise, it calls the method __call(args..) on the object. (Callable)


[]
x[y]
transforms to x.__operator_subscript(y)
This method is defined on &[] types, and can be overloaded for any struct.


.
x.<name>
x must be a struct, with a field (or method) with the corresponding name.
Returns a reference to that field.


::
x::<name>
Performs name resolution.
Used to access static methods











[V???]
TODO: which version ???
Defererence operator
*x => __operator_deref(x : U);
Some special native types overlaod this operator (eg smart pointers)
 

[V???]
@TODO: wich version
Sizeof operator

[V???]
Arrow operator (->)
@TODO: which version ?
x->[name> => (*x).<name>


[V???]
Operators overloading
@TODO: which version