#include "parser/lexer.hh"

namespace cgen {
const obcl::Lexer::CustomTokenInfos token_infos_custom[] = {
    {TOK_OP_ADD, "+", "OP_ADD"},
    {TOK_OP_SUB, "-", "OP_SUB"},
    {TOK_OP_MUL, "*", "OP_MUL"},
    {TOK_OP_DIV, "/", "OP_DIV"},
    {TOK_OP_MOD, "%", "OP_MOD"},
    {TOK_OP_NOT, "!", "OP_NOT"},
    {TOK_OP_BNOT, "~", "OP_BNOT"},
    {TOK_OP_BLS, "<<", "OP_BLS"},
    {TOK_OP_BRS, ">>", "OP_BRS"},
    {TOK_OP_LE, "<=", "OP_LE"},
    {TOK_OP_LT, "<", "OP_LT"},
    {TOK_OP_GE, ">=", "OP_GE"},
    {TOK_OP_GT, ">", "OP_GT"},
    {TOK_OP_EQ, "==", "OP_EQ"},
    {TOK_OP_NE, "!=", "OP_NE"},
    {TOK_OP_BAND, "&", "OP_BAND"},
    {TOK_OP_BOR, "|", "OP_BOR"},
    {TOK_OP_BXOR, "^", "OP_BXOR"},
    {TOK_OP_AND, "&&", "OP_AND"},
    {TOK_OP_OR, "||", "OP_OR"},

    {TOK_SYM_LPAREN, "(", "SYM_LPAREN"},
    {TOK_SYM_RPAREN, ")", "SYM_RPAREN"},
    {TOK_SYM_LCBRACK, "{", "SYM_LCBRACK"},
    {TOK_SYM_RCBRACK, "}", "SYM_RCBRACK"},
    {TOK_SYM_COMMA, ",", "OP_COMA"},
    {TOK_SYM_SEMI, ";", "OP_SEMI"},
    {TOK_SYM_COLON, ":", "OP_COLON"},
    {TOK_SYM_DOT, ".", "SYM_DOT"},
    {TOK_SYM_EQ, "=", "SYM_EQ"},

    {TOK_KW_FN, "fn", "KW_FN"},
    {TOK_KW_STRUCT, "struct", "KW_STRUCT"},
    {TOK_KW_TYPE, "type", "KW_TYPE"},
    {TOK_KW_VAR, "var", "KW_VAR"},
    {TOK_KW_IF, "if", "KW_IF"},
    {TOK_KW_ELSE, "else", "kW_ELSE"},
    {TOK_KW_WHILE, "while", "KW_WHILE"},
    {TOK_KW_BREAK, "break", "KW_BREAK"},
    {TOK_KW_CONTINUE, "continue", "kW_CONTINUE"},
    {TOK_KW_RETURN, "return", "KW_RETURN"},
    {TOK_KW_SIZEOF, "sizeof", "KW_SIZEOF"},
    {TOK_KW_STATIC_CAST, "static_cast", "KW_STATIC_CAST"},
    {TOK_KW_PTR_CAST, "ptr_cast", "KW_PTR_CAST"},
    {TOK_KW_REINTERPRET_CAST, "reinterpret_cast", "KW_REINTERPRET_CAST"},
    {0, "", ""},
};
}
